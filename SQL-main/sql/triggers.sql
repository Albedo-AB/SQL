-- Vista: videojuegos populares
CREATE OR REPLACE VIEW videojuegos_populares AS
SELECT 
    v.titulo,
    v.desarrollador,
    v.año_lanzamiento,
    STRING_AGG(DISTINCT g.nombre, ', ') AS generos,
    STRING_AGG(DISTINCT p.nombre, ', ') AS plataformas,
    v.rating AS rating_promedio,
    (SELECT COUNT(*) FROM reseñas r WHERE r.videojuego_id = v.id) AS total_reseñas
FROM videojuegos v
LEFT JOIN videojuego_generos vg ON v.id = vg.videojuego_id
LEFT JOIN generos g ON vg.genero_id = g.id
LEFT JOIN videojuego_plataformas vp ON v.id = vp.videojuego_id
LEFT JOIN plataformas p ON vp.plataforma_id = p.id
GROUP BY v.id
HAVING (SELECT COUNT(*) FROM reseñas r WHERE r.videojuego_id = v.id) >= 1
ORDER BY rating_promedio DESC, total_reseñas DESC;

-- Función: recomendar videojuegos según géneros favoritos del usuario
CREATE OR REPLACE FUNCTION recomendar_videojuegos(usuario_id_param BIGINT)
RETURNS TABLE(titulo VARCHAR(200), desarrollador VARCHAR(100), rating DECIMAL(3,2), generos TEXT)
AS $$
BEGIN
  RETURN QUERY
  WITH generos_favoritos AS (
    SELECT DISTINCT vg.genero_id
    FROM reseñas r
    JOIN videojuego_generos vg ON r.videojuego_id = vg.videojuego_id
    WHERE r.usuario_id = usuario_id_param AND r.puntuacion >= 8
  )
  SELECT 
    v.titulo, 
    v.desarrollador, 
    v.rating,
    (SELECT STRING_AGG(g.nombre, ', ') 
     FROM generos g 
     JOIN videojuego_generos vg2 ON g.id = vg2.genero_id 
     WHERE vg2.videojuego_id = v.id) AS generos
  FROM videojuegos v
  WHERE EXISTS (
    SELECT 1 FROM videojuego_generos vg 
    WHERE vg.videojuego_id = v.id AND vg.genero_id IN (SELECT genero_id FROM generos_favoritos)
  )
  AND NOT EXISTS (
    SELECT 1 FROM reseñas r2 WHERE r2.videojuego_id = v.id AND r2.usuario_id = usuario_id_param
  )
  AND v.rating >= 7.5
  ORDER BY v.rating DESC
  LIMIT 5;
END;
$$ LANGUAGE plpgsql;

-- Auditoría
CREATE TABLE auditoria_videojuegos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  videojuego_id BIGINT,
  accion VARCHAR(10) NOT NULL,
  datos_antiguos JSONB,
  datos_nuevos JSONB,
  fecha TIMESTAMPTZ DEFAULT NOW(),
  usuario_modificador NAME DEFAULT CURRENT_USER
);

CREATE OR REPLACE FUNCTION funcion_auditoria_videojuegos()
RETURNS TRIGGER AS $$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    INSERT INTO auditoria_videojuegos (videojuego_id, accion, datos_nuevos)
    VALUES (NEW.id, TG_OP, to_jsonb(NEW));
  ELSIF (TG_OP = 'UPDATE') THEN
    INSERT INTO auditoria_videojuegos (videojuego_id, accion, datos_antiguos, datos_nuevos)
    VALUES (NEW.id, TG_OP, to_jsonb(OLD), to_jsonb(NEW));
  ELSIF (TG_OP = 'DELETE') THEN
    INSERT INTO auditoria_videojuegos (videojuego_id, accion, datos_antiguos)
    VALUES (OLD.id, TG_OP, to_jsonb(OLD));
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_auditoria_videojuegos
AFTER INSERT OR UPDATE OR DELETE ON videojuegos
FOR EACH ROW EXECUTE FUNCTION funcion_auditoria_videojuegos();

-- Estadísticas automáticas al insertar reseña
CREATE OR REPLACE FUNCTION actualizar_stats_agregadas()
RETURNS TRIGGER AS $$
DECLARE
  total_reseñas_usuario INT;
BEGIN
  SELECT COUNT(*) INTO total_reseñas_usuario FROM reseñas WHERE usuario_id = NEW.usuario_id;

  UPDATE usuarios SET nivel_gamer = CASE
    WHEN total_reseñas_usuario >= 50 THEN 'Hardcore'
    WHEN total_reseñas_usuario >= 20 THEN 'Avid'
    WHEN total_reseñas_usuario >= 5 THEN 'Casual'
    ELSE 'Beginner'
  END WHERE id = NEW.usuario_id;

  UPDATE videojuegos SET rating = (
    SELECT AVG(puntuacion) FROM reseñas WHERE videojuego_id = NEW.videojuego_id
  ) WHERE id = NEW.videojuego_id;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_nueva_reseña
AFTER INSERT ON reseñas
FOR EACH ROW
EXECUTE FUNCTION actualizar_stats_agregadas();
